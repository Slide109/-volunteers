# source: http://localhost:3030/graphql/query
# timestamp: Wed Apr 29 2020 21:06:58 GMT+0300 (Moscow Standard Time)

input AssignTaskInput {
  taskID: String!
}

type Authorization {
  token: String!
  user: User!
}

input AuthorizationInput {
  phone: String!
  password: String!
}

input CallInput {
  userPhone: String!
  userName: String
  assigneeName: String
  assigneePhone: String!
}

type City {
  id: String!
  name: String!
  coordinates: Coordinates!
}

type Coordinates {
  id: String!
  latitude: String!
  longitude: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createUser(userInput: UserInput!): User!
  updateUser(input: UserUpdateInput!): User!
  taskCreate(taskInput: TaskInput!): Task!
  assignTask(input: AssignTaskInput!): Boolean!
  updateTaskStatus(input: UpdateStatusInput!): Boolean!
  sendValidationCode(phone: String!): Boolean!
  validatePhone(validatePhoneInput: ValidatePhoneInput!): Boolean!
  authorization(input: AuthorizationInput!): Authorization!
}

type Query {
  getUsers: [User!]!
  user(id: String!): User!
  whoAmI: User!
  tasks(filters: TaskFilter): [Task!]!
  task(id: String!): Task!
  userTasks: [Task!]!
  assignedTasks: [Task!]!
  cities: [City!]!
  call(input: CallInput!): Boolean!
}

type Task {
  id: String!
  title: String!
  description: String
  user: User!
  assignee: User
  status: TaskStatus
  coordinates: String
  created_at: DateTime!
}

input TaskFilter {
  user: String
  assignee: String
  status: [TaskStatus!]
}

input TaskInput {
  title: String!
  description: String
  coordinates: String
}

enum TaskStatus {
  New
  Assigned
  Completed
  Cancelled
}

input UpdateStatusInput {
  taskID: String!
  status: TaskStatus!
}

type User {
  id: String!
  firstName: String!
  lastName: String
  role: UserRole!
  email: String
  phone: String!
  password: String!
  bio: String
  age: Int
  gender: UserGender
}

enum UserGender {
  Female
  Male
}

input UserInput {
  firstName: String!
  lastName: String
  role: UserRole = User
  email: String
  phone: String!
  password: String!
  bio: String
  age: Int
  gender: UserGender
}

enum UserRole {
  User
  Volunteer
}

input UserUpdateInput {
  firstName: String!
  lastName: String
  email: String
  bio: String
  age: Int
  gender: UserGender
}

input ValidatePhoneInput {
  phone: String!
  code: String!
}
