/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  getUsers: Array<GQLUser>;
  user: GQLUser;
  whoAmI: GQLUser;
  tasks: Array<GQLTask>;
  task: GQLTask;
  userTasks: Array<GQLTask>;
  assignedTasks: Array<GQLTask>;
  cities: Array<GQLCity>;
  call: boolean;
}

export interface GQLUser {
  id: string;
  firstName: string;
  lastName?: string;
  role: GQLUserRole;
  email?: string;
  phone: string;
  password: string;
  bio?: string;
  age?: number;
  gender?: GQLUserGender;
}

export enum GQLUserRole {
  User = 'User',
  Volunteer = 'Volunteer'
}

export enum GQLUserGender {
  Female = 'Female',
  Male = 'Male'
}

export interface GQLTaskFilter {
  user?: string;
  assignee?: string;
  status?: Array<GQLTaskStatus>;
}

export enum GQLTaskStatus {
  New = 'New',
  Assigned = 'Assigned',
  Completed = 'Completed',
  Cancelled = 'Cancelled'
}

export interface GQLTask {
  id: string;
  title: string;
  description?: string;
  user: GQLUser;
  assignee?: GQLUser;
  status?: GQLTaskStatus;
  coordinates?: string;
  created_at: GQLDateTime;
}

/**
 * A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
 */
export type GQLDateTime = any;

export interface GQLCity {
  id: string;
  name: string;
  coordinates: GQLCoordinates;
}

export interface GQLCoordinates {
  id: string;
  latitude: string;
  longitude: string;
}

export interface GQLCallInput {
  userPhone: string;
  userName?: string;
  assigneeName?: string;
  assigneePhone: string;
}

export interface GQLMutation {
  createUser: GQLUser;
  updateUser: GQLUser;
  taskCreate: GQLTask;
  assignTask: boolean;
  updateTaskStatus: boolean;
  sendValidationCode: boolean;
  validatePhone: boolean;
  authorization: GQLAuthorization;
}

export interface GQLUserInput {
  firstName: string;
  lastName?: string;
  role?: GQLUserRole;
  email?: string;
  phone: string;
  password: string;
  bio?: string;
  age?: number;
  gender?: GQLUserGender;
}

export interface GQLUserUpdateInput {
  firstName: string;
  lastName?: string;
  email?: string;
  bio?: string;
  age?: number;
  gender?: GQLUserGender;
}

export interface GQLTaskInput {
  title: string;
  description?: string;
  coordinates?: string;
}

export interface GQLAssignTaskInput {
  taskID: string;
}

export interface GQLUpdateStatusInput {
  taskID: string;
  status: GQLTaskStatus;
}

export interface GQLValidatePhoneInput {
  phone: string;
  code: string;
}

export interface GQLAuthorizationInput {
  phone: string;
  password: string;
}

export interface GQLAuthorization {
  token: string;
  user: GQLUser;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  User?: GQLUserTypeResolver;
  Task?: GQLTaskTypeResolver;
  DateTime?: GraphQLScalarType;
  City?: GQLCityTypeResolver;
  Coordinates?: GQLCoordinatesTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Authorization?: GQLAuthorizationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  getUsers?: QueryToGetUsersResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  whoAmI?: QueryToWhoAmIResolver<TParent>;
  tasks?: QueryToTasksResolver<TParent>;
  task?: QueryToTaskResolver<TParent>;
  userTasks?: QueryToUserTasksResolver<TParent>;
  assignedTasks?: QueryToAssignedTasksResolver<TParent>;
  cities?: QueryToCitiesResolver<TParent>;
  call?: QueryToCallResolver<TParent>;
}

export interface QueryToGetUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  id: string;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToWhoAmIResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTasksArgs {
  filters?: GQLTaskFilter;
}
export interface QueryToTasksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTasksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTaskArgs {
  id: string;
}
export interface QueryToTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTaskArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserTasksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAssignedTasksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCitiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCallArgs {
  input: GQLCallInput;
}
export interface QueryToCallResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCallArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  firstName?: UserToFirstNameResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
  role?: UserToRoleResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  phone?: UserToPhoneResolver<TParent>;
  password?: UserToPasswordResolver<TParent>;
  bio?: UserToBioResolver<TParent>;
  age?: UserToAgeResolver<TParent>;
  gender?: UserToGenderResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAgeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTaskTypeResolver<TParent = any> {
  id?: TaskToIdResolver<TParent>;
  title?: TaskToTitleResolver<TParent>;
  description?: TaskToDescriptionResolver<TParent>;
  user?: TaskToUserResolver<TParent>;
  assignee?: TaskToAssigneeResolver<TParent>;
  status?: TaskToStatusResolver<TParent>;
  coordinates?: TaskToCoordinatesResolver<TParent>;
  created_at?: TaskToCreated_atResolver<TParent>;
}

export interface TaskToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaskToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaskToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaskToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaskToAssigneeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaskToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaskToCoordinatesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaskToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCityTypeResolver<TParent = any> {
  id?: CityToIdResolver<TParent>;
  name?: CityToNameResolver<TParent>;
  coordinates?: CityToCoordinatesResolver<TParent>;
}

export interface CityToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CityToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CityToCoordinatesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCoordinatesTypeResolver<TParent = any> {
  id?: CoordinatesToIdResolver<TParent>;
  latitude?: CoordinatesToLatitudeResolver<TParent>;
  longitude?: CoordinatesToLongitudeResolver<TParent>;
}

export interface CoordinatesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoordinatesToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoordinatesToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createUser?: MutationToCreateUserResolver<TParent>;
  updateUser?: MutationToUpdateUserResolver<TParent>;
  taskCreate?: MutationToTaskCreateResolver<TParent>;
  assignTask?: MutationToAssignTaskResolver<TParent>;
  updateTaskStatus?: MutationToUpdateTaskStatusResolver<TParent>;
  sendValidationCode?: MutationToSendValidationCodeResolver<TParent>;
  validatePhone?: MutationToValidatePhoneResolver<TParent>;
  authorization?: MutationToAuthorizationResolver<TParent>;
}

export interface MutationToCreateUserArgs {
  userInput: GQLUserInput;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateUserArgs {
  input: GQLUserUpdateInput;
}
export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTaskCreateArgs {
  taskInput: GQLTaskInput;
}
export interface MutationToTaskCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTaskCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAssignTaskArgs {
  input: GQLAssignTaskInput;
}
export interface MutationToAssignTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAssignTaskArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTaskStatusArgs {
  input: GQLUpdateStatusInput;
}
export interface MutationToUpdateTaskStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTaskStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendValidationCodeArgs {
  phone: string;
}
export interface MutationToSendValidationCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendValidationCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToValidatePhoneArgs {
  validatePhoneInput: GQLValidatePhoneInput;
}
export interface MutationToValidatePhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToValidatePhoneArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthorizationArgs {
  input: GQLAuthorizationInput;
}
export interface MutationToAuthorizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthorizationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthorizationTypeResolver<TParent = any> {
  token?: AuthorizationToTokenResolver<TParent>;
  user?: AuthorizationToUserResolver<TParent>;
}

export interface AuthorizationToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthorizationToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
